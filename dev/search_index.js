var documenterSearchIndex = {"docs":
[{"location":"#GasDispersion.jl","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl is a set of tools for atmospheric dispersion modeling of gaseous releases, such as might occur during an emergency at a chemical plant or more  routinely from a stack. This is intended to be the level of disperson modeling used support consequence analysis or QRA such as is described in Lee's Loss Prevention in the Process Industries or the CCPS Guidelines for Consequence Analysis of Chemical Releases.","category":"page"},{"location":"#Installation","page":"GasDispersion.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl can be installed using Julia's built-in package manager. In a Julia session, enter the package manager mode by hitting ], then run the command","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"pkg> add https://github.com/aefarrell/GasDispersion.jl","category":"page"},{"location":"#Example-usage","page":"GasDispersion.jl","title":"Example usage","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"note: Worked examples\nThis is just a brief overview, detailed worked examples are available as jupyter notebooks","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"This scenario is adapted from CCPS Guidelines for Consequence Analysis of Chemical Releases, CCPS, pg 47.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Suppose we wish to model the dispersion of gaseous propane from a leak from a storage tank, where the leak is from a 10 mm hole that is 3.5 m above the ground and the propane is at 25°C and 4barg. Assume the discharge coefficient c_D = 085","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"For ambient conditions we assume the atmosphere is dry air at standard conditions of 1atm and 25°C, with a windspeed of 1.5m/s and class F stability (a \"worst case\" atmospheric stability)","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"using GasDispersion\n\npropane = Substance(name = :propane,\n                    gas_density = 9.7505, # kg/m^3, NIST Webbook\n                    liquid_density = 526.13, # kg/m^3, NIST Webbook\n                    reference_temp= 298.15, # K\n                    reference_pressure= 501325, # Pa\n                    boiling_temp = 231.04, # K, NIST Webbook\n                    latent_heat = 16.25/44.0956, # J/kg, NIST Webbook\n                    gas_heat_capacity = 1.6849,    # J/kg/K, NIST Webbook\n                    liquid_heat_capacity = 2.2460) # J/kg/K, NIST Webbook\n\nscn = scenario_builder(propane, JetSource;\n       phase = :gas,\n       diameter = 0.01, # m\n       dischargecoef = 0.85,\n       k = 1.15,         # heat capacity ratio, from Crane's\n       temperature = T1, # K\n       pressure = P1,    # Pa\n       height = 3.5,     # m, height of hole above the ground\n       duration = 1)     # s, duration of release","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"This generates a Scenario defined for a gas jet discharging into dry air at standard conditions. Once we have this defined we can determine the concentration at any point downwind of the release point, assuming the release is a continuous plume, using","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a callable\npl = plume(scn, GaussianPlume)\n\npl(x,y,z) # gives the concentration in kg/m^3 at the point x, y, z","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"where the coordinate system is such that the release point is at x=0, y=0, z=h","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Similarly we could model an instantaneous release, assuming all of the mass was released during 1 second, using a \"puff\" model","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a function\npf = puff(scn, GaussianPuff)\n\np(x,y,z,t) # gives the concentration in kg/m^3 at the point x, y, z and time t","category":"page"},{"location":"#Building-Scenarios","page":"GasDispersion.jl","title":"Building Scenarios","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A Scenario is a container for all of the information that a model may need to produce a solution. The intention is for the Scenario to be re-usable, so that the user may run the same scenario with multiple models without much difficulty. Models also have specific parameters, those are handled in the model itself.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A scenario_builder function exists to help create valid Scenarios for various standard release scenarios.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"scenario_builder\n\nscenario_builder(::Substance, ::Type{JetSource}, ::Atmosphere)","category":"page"},{"location":"#GasDispersion.scenario_builder","page":"GasDispersion.jl","title":"GasDispersion.scenario_builder","text":"scenario_builder(substance::Substance, source::SourceModel, atmosphere::Atmosphere)\n\nBuilds a scenario given a substance, source model and an atmosphere. If no atmosphere is given defaults to dry air at ambient conditions and class F stability.\n\n\n\n\n\n","category":"function"},{"location":"#GasDispersion.scenario_builder-Tuple{Substance, Type{JetSource}, Atmosphere}","page":"GasDispersion.jl","title":"GasDispersion.scenario_builder","text":"scenario_builder(substance::Substance, JetSource, atmosphere::Atmosphere; kwargs...)\n\nReturns returns a scenario for a simple jet from a circular hole. The jet can either be a liquid or a gas (in which case it is assumed to be an ideal gas and the jet is isentropic).\n\nReferences\n\nCCPS, Guidelines for Consequence Analysis of Chemical Releases, American Institute of Chemical Engineers, New York (1999)\n\nArguments\n\nphase=:liquid: the phase, either :liquid or :gas\ndischargecoef::Number=0.61: the discharge coefficient cd\nk::Number=1.4: the heat capacity ratio Cp/Cv\ndiameter::Number: the diameter of the hole, m\nheight::Number: the height of the hole, m\npressure::Number: the pressure upstream of the jet, Pa\ntemperature::Number: the temperature upstream of the jet, K\nduration::Number: the duration of the leak, s\n\n\n\n","category":"method"},{"location":"#Plume-Models","page":"GasDispersion.jl","title":"Plume Models","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Plume models are models of continuous, steady-state, releases and are time independent, this includes, for example, emissions from elevated stacks.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume","category":"page"},{"location":"#GasDispersion.plume","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(scenario::Scenario, model::PlumeModel)\n\nRuns the plume dispersion model on the given scenario and returns the solution which is callable to give the concentration     c(x, y, z[, t])\n\nThe concentration is in kg/m³, if model is unspecified, defaults to a simple gaussian plume model.\n\nAll model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"},{"location":"#Gaussian-Plumes","page":"GasDispersion.jl","title":"Gaussian Plumes","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A Gaussian plume is a steady state plume defined by a Gaussian distribution in the y and z directions and an exponential decay in the x direction. The dispersion parameters are correlated to the downwind distance.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::Type{GaussianPlume})","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, Type{GaussianPlume}}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(::Scenario, GaussianPlume; kwargs...)\n\nReturns the solution to a Gaussian plume dispersion model for the given scenario.\n\ncleft(xyzright) =  dotm over  2 pi sigma_y sigma_z u  \nexp left -frac12 left( y over sigma_y right)^2 right \ntimes left exp left -frac12 left(  z -h  over sigma_z right)^2 right\n+ exp left -frac12 left(  z + h  over sigma_z right)^2 right right\n\nwhere the σs are dispersion parameters correlated with the distance x\n\nReferences\n\nCCPS, Guidelines for Consequence Analysis of Chemical Releases, American Institute of Chemical Engineers, New York (1999)\n\nArguments\n\ndownwash::Bool=false: when true, includes stack-downwash effects\nplumerise::Bool=false: when true, includes plume-rise effects using Briggs' model\n\n\n\n","category":"method"},{"location":"#Simple-Jet-Plumes","page":"GasDispersion.jl","title":"Simple Jet Plumes","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The simple jet plume is a steady state turbulent jet defined by a Gaussian distribution in the y and z directions. It is similar to the Gaussian plume, however in this case the momentum forming the plume comes entirely from the jet and not the ambient windspeed.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::Type{SimpleJet})","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, Type{SimpleJet}}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(::Scenario, SimpleJet; kwargs...)\n\nReturns the solution to a simple turbulent jet dispersion model for the given scenario.\n\ncleft(xyzright) = k_2 c_0 left( d over z right) sqrt rho_j over rho_a \nexp left( - left( k_3  r over z  right)^2 right)\n\nwhere r is the radial distance from the jet centerline. Assumes a circular jet with diameter equal to the jet diameter. Ground-reflection is included by method of images.\n\nReferences\n\nLong, V.D., \"Estimation of the Extent of Hazard Areas Around a Vent\" Chem. Process Hazard, II:6 (1963)\n\nArguments\n\nrelease_angle::Number=0: the angle at which the jet is released, in radians\nk2::Number=6 parameter of the model, default value is recommended by Long\nk3::Number=5 parameter of the model, default value is recommended by Long\n\n\n\n","category":"method"},{"location":"#Britter-McQuaid-Model","page":"GasDispersion.jl","title":"Britter-McQuaid Model","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The Britter-McQuaid model is an empirical correlation for dense plume dispersion. The model generates an interpolation function for the centerline concentration at the downwind distance x.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::Type{BritterMcQuaidPlume})","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, Type{BritterMcQuaidPlume}}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(::Scenario, BritterMcQuaidPlume)\n\nReturns the solution to a Britter-McQuaid dispersion model for the given scenario.\n\nReferences\n\nBritter, R.E. and J. McQuaid, Workbook on the Dispersion of Dense Gases HSE Contract Research Report No. 17/1988, 1988\n\n\n\n\n\n","category":"method"},{"location":"#Puff-Models","page":"GasDispersion.jl","title":"Puff Models","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Puff models are for \"instantaneous\" releases or other time-dependent releases.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff","category":"page"},{"location":"#GasDispersion.puff","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(scenario::Scenario, model::PuffModel)\n\nRuns the puff dispersion model on the given scenario and returns the solution which is callable to give the concentration     c(x, y, z, t)\n\nThe concentration is in kg/m³, if model is unspecified, defaults to a simple gaussian puff.\n\nAll model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"},{"location":"#Gaussian-Puffs","page":"GasDispersion.jl","title":"Gaussian Puffs","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A Gaussian puff model is defined by gaussian distributions in the x, y, and z directions and travels downwind at the ambient windspeed. The dispersion parameters of the gaussians are correlated with the downwind distance of cloud center.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff(::Scenario, ::Type{GaussianPuff})","category":"page"},{"location":"#GasDispersion.puff-Tuple{Scenario, Type{GaussianPuff}}","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(::Scenario, GaussianPuff)\n\nReturns the solution to a Gaussian puff dispersion model for the given scenario.\n\ncleft(xyztright) = dotm Delta t\n  exp left( -frac12 left( x - u t  over sigma_x right)^2 right)  over  sqrt2pi sigma_x  \n  exp left( -frac12 left( y over sigma_y right)^2 right)  over  sqrt2pi sigma_y  \ntimes   exp left( -frac12 left( z - h over sigma_z right)^2 right)\n+ exp left( -frac12 left( z + h over sigma_z right)^2 right)  over  sqrt2pi sigma_z  \n\nReferences\n\nCCPS, Guidelines for Consequence Analysis of Chemical Releases, American Institute of Chemical Engineers, New York (1999)\n\n\n\n","category":"method"},{"location":"#Integrated-Gaussian-Puffs","page":"GasDispersion.jl","title":"Integrated Gaussian Puffs","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The integrated Gaussian puff model treats the release as a sum of n equally spaced Gaussian puffs, starting at t = 0 to t = Delta t. The default behaviour is to take the limit n to infty.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff(::Scenario, ::Type{IntPuff})","category":"page"},{"location":"#GasDispersion.puff-Tuple{Scenario, Type{IntPuff}}","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(::Scenario, IntPuff; kwargs...)\n\nReturns the solution to an integrated Gaussian dispersion model, where the release is modeled as a sequence of Gaussian puffs, for the given scenario.\n\ncleft(xyztright) = sum_i^n-1  dotm Delta t over n \n  exp left( -frac12 left( x - u left( t - i delta t right)  over sigma_x right)^2 right)  over  sqrt2pi sigma_x  \n  exp left( -frac12 left( y over sigma_y right)^2 right)  over  sqrt2pi sigma_y  \ntimes   exp left( -frac12 left( z - h over sigma_z right)^2 right)\n+ exp left( -frac12 left( z + h over sigma_z right)^2 right)  over  sqrt2pi sigma_z  \n\nwhere δt is Δt/n, and the σs are dispersion parameters correlated with the distance x\n\nArguments\n\nn::Integer: the number of discrete gaussian puffs, defaults to infinity\n\n\n\n","category":"method"}]
}
