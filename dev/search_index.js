var documenterSearchIndex = {"docs":
[{"location":"#GasDispersion.jl","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl aims to bring together several models for dispersion modeling of chemical releases with a consistent interface.","category":"page"},{"location":"#Installation","page":"GasDispersion.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl can be installed using Julia's built-in package manager. In a Julia session, enter the package manager mode by hitting ], then run the command","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"pkg> add https://github.com/aefarrell/GasDispersion.jl","category":"page"},{"location":"#Example-usage","page":"GasDispersion.jl","title":"Example usage","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"note: Worked examples\nThis is just a brief overview, detailed worked examples are available as jupyter notebooks","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Suppose a chemical release of some substance with a release rate of 1kg/s, at a height of 1m. Using some standard engineering estimates we might end up with a release scenario with the following parameters:","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"scenario = Scenario(\n    1.0,   # mass emission rate, kg/s\n    10.0,  # release duration, s\n    0.25,  # jet diameter, m\n    15.67, # jet velocity, m/s\n    1.3,   # jet density, kg/m^3\n    101325,# release_pressure, Pa\n    450,   # release temperature, K\n    1.0,   # release height, m\n    1.5,   # windspeed, m/s\n    1.225, # ambient density, kg/m^3\n    101325,# ambient pressure, Pa\n    298.15,# ambient temperature, K\n    \"F\",   # pasquill stability class\n)","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Once we have this defined we can determine the concentration at any point downwind of the release point, assuming the release is a continuous plume, using","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a function\nplume_conc = plume(scenario, model=:gaussian)\n\nplume_conc(x,y,z) # gives the concentration in kg/m^3 at the point x, y, z","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"where the coordinate system is such that the release point is at x=0, y=0, z=h","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Similarly we could model an instantaneous release, assuming all of the mass was released during 1 second, using a \"puff\" model","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a function\npuff_conc = puff(scenario, model=:gaussian)\n\npuff_conc(x,y,z,t) # gives the concentration in kg/m^3 at the point x, y, z and time t","category":"page"},{"location":"#Future","page":"GasDispersion.jl","title":"Future","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Currently the only models implemented are simple gaussian plumes and puffs, in the future I would like to implement some dense gas models as well.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Additionally constructing a scenario is relatively user unfriendly, and I would like to implement some helper functions to generate Scenarios given some minimal input.","category":"page"},{"location":"#Function-Reference","page":"GasDispersion.jl","title":"Function Reference","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume\n\npuff","category":"page"},{"location":"#GasDispersion.plume","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(scenario::Scenario; model=:gaussian, kwargs...)\n\nRuns the plume dispersion model on the given scenario and returns a callable giving the concentration of the form     c(x, y, z[, t])\n\nIf model is unspecified, defaults to gaussian, kwargs are passed to the plume model. All model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"},{"location":"#GasDispersion.puff","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(scenario::Scenario; model=:gaussian, kwargs...)\n\nRuns the puff dispersion model on the given scenario and returns a callable giving the concentration of the form     c(x, y, z, t)\n\nIf model is unspecified, defaults to gaussian, kwargs are passed to the puff model. All model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"}]
}
