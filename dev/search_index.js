var documenterSearchIndex = {"docs":
[{"location":"#GasDispersion.jl","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl aims to bring together several models for dispersion modeling of chemical releases with a consistent interface. Currently it is very much under development and significant portions of the code and interface are subject to change.","category":"page"},{"location":"#Installation","page":"GasDispersion.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"GasDispersion.jl can be installed using Julia's built-in package manager. In a Julia session, enter the package manager mode by hitting ], then run the command","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"pkg> add https://github.com/aefarrell/GasDispersion.jl","category":"page"},{"location":"#Example-usage","page":"GasDispersion.jl","title":"Example usage","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"note: Worked examples\nThis is just a brief overview, detailed worked examples are available as jupyter notebooks","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"This scenario is adapted from CCPS Guidelines for Consequence Analysis of Chemical Releases, CCPS, pg 40.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Suppose a leak of a liquid from a storage tank through a hole. At the hole, the liquid pressure is 120kPa, the liquid has a density of 490 kg/m³, and is in thermal equilibrium with the environment. Assume a circular hole with a discharge coefficient of 0.63 and a diameter of 1cm.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"For ambient conditions we assume the atmosphere is at standard conditions of 1atm and 25°C, with a windspeed of 1.5m/s and class F stability (a \"worst case\" atmospheric stability)","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Assumptions:","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"discharge coefficient, 0.63\ndiameter of the hole, 0.010m\nliquid density, 490kg/m3\nliquid temperature, 25C or 298.15K\nliquid pressure, 120kPA or 120000Pa\nambient pressure, 1atm or 101325Pa\nambient temperature, 25C or 298.15K\ndensity of air at standard conditions, 1.225kg/m3\nambient windspeed, 1.5m/s\nPasquill-Gifford stability F","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"using GasDispersion\n\nsource=JetSource(phase=:liquid, dischargecoef=0.63, diameter=0.01, duration=1,\n                 pressure=120000, temperature=298.15, density=490, height=1)\n\ns = scenario_builder(source, Ambient())","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Returns a Scenario defined for a liquid jet discharging into the air at standard conditions. Once we have this defined we can determine the concentration at any point downwind of the release point, assuming the release is a continuous plume, using","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a function\nc = plume(s, GaussianPlume())\n\nc(x,y,z) # gives the concentration in kg/m^3 at the point x, y, z","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"where the coordinate system is such that the release point is at x=0, y=0, z=h","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Similarly we could model an instantaneous release, assuming all of the mass was released during 1 second, using a \"puff\" model","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"# returns a function\nc = puff(s, GaussianPuff())\n\nc(x,y,z,t) # gives the concentration in kg/m^3 at the point x, y, z and time t","category":"page"},{"location":"#Building-Scenarios","page":"GasDispersion.jl","title":"Building Scenarios","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A Scenario is a container for all of the information that a model may need to produce a solution. The intention is for the Scenario to be re-usable, so that the user may run the same scenario with multiple models without much difficulty. Models also have specific parameters, those are handled in the model itself.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"By default a Scenario can have any field missing, this is because not all models require all fields. Each model then verifies that none of the necessary fields are missing and throws an error otherwise.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A scenario_builder function exists to help create valid Scenarios for various standard release scenarios.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"scenario_builder\n\nscenario_builder(::JetSource, ::Atmosphere)","category":"page"},{"location":"#GasDispersion.scenario_builder","page":"GasDispersion.jl","title":"GasDispersion.scenario_builder","text":"scenario_builder(source::SourceModel, atmosphere::Atmosphere)\n\nBuilds a scenario given a source model and an atmosphere. If no atmosphere is given defaults to ambient conditions.\n\n\n\n\n\n","category":"function"},{"location":"#GasDispersion.scenario_builder-Tuple{JetSource, Atmosphere}","page":"GasDispersion.jl","title":"GasDispersion.scenario_builder","text":"scenario_builder(source::JetSource(kwargs), atmosphere::Atmosphere)\n\nReturns returns a scenario with a simple jet source from a circular hole. The jet can either be a liquid or a gas, which case it is assumed to be an ideal gas and the jet is isentropic.\n\nLiquid and gas discharge models are per Guidelines for Consequence Analysis of Chemical Release, CCPS, New York (1999)\n\nArguments\n\nphase=:liquid: the phase, either :liquid or :gas\ndischargecoef::Number=0.61: the discharge coefficient cd\nk::Number=1.4: the heat capacity ration cp/cv\ndiameter::Number: the diameter of the hole\npressure::Number: the pressure upstream of the jet\ntemperature::Number: the temperature upstream of the jet\ndensity::Number: the density of the fluid upstream of the jet\n\n\n\n","category":"method"},{"location":"#Plume-Models","page":"GasDispersion.jl","title":"Plume Models","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Plume models are models of continuous, steady-state, releases and are time independent, this includes, for example, emissions from elevated stacks.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume","category":"page"},{"location":"#GasDispersion.plume","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(scenario::Scenario, model::PlumeModel)\n\nRuns the plume dispersion model on the given scenario and returns a callable giving the concentration of the form     c(x, y, z[, t])\n\nIf model is unspecified, defaults to gaussian.\n\nAll model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"},{"location":"#Gaussian-Plumes","page":"GasDispersion.jl","title":"Gaussian Plumes","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A gaussian plume is a steady state plume defined by a gaussian distribution in the y and z directions and an exponential decay in the x direction. The dispersion parameters are correlated to the downwind distance.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::GaussianPlume)","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, GaussianPlume}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(::Scenario; GaussianPlume(kwargs...))\n\nGenerates a gaussian dispersion model for the given scenario and returns a callable giving the concentration of the form c(x, y, z[, t])\n\nGaussian plume model is per Guidelines for Consequence Analysis of Chemical Release, CCPS, New York (1999)\n\ncleft(xyzright) =  dotm over  2 pi sigma_y sigma_z u  \nexp left -frac12 left( y over sigma_y right)^2 right \ntimes left exp left -frac12 left(  z -h  over sigma_z right)^2 right\n+ exp left -frac12 left(  z + h  over sigma_z right)^2 right right\n\nwhere the σs are dispersion parameters correlated with the distance x\n\nArguments\n\ndownwash::Bool=false: when true, includes stack-downwash effects\nplumerise::Bool=false: when true, includes plume-rise effects using Briggs' model\n\n\n\n","category":"method"},{"location":"#Simple-Jet-Plumes","page":"GasDispersion.jl","title":"Simple Jet Plumes","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The simple jet plume is a steady state turbulent jet defined by a gaussian distribution in the y and z directions. It is similar to the gaussian plume, however in this case the momentum forming the plume comes entirely from the jet and not the ambient windspeed.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::SimpleJet)","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, SimpleJet}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(scenario::Scenario, SimpleJet(kwargs...))\n\nGenerates a simple turbulent jet dispersion model for the given scenario and returns a callable giving the concentration with the form c(x, y, z[, t])\n\nTurbulent jet model is per Long, V.D., \"Estimation of the Extent of Hazard Areas Around a Vent\", Chem. Process Hazard, II, 6, 1963 ↩\n\ncleft(xyzright) = k_2 c_0 left( d over z right) sqrt rho_j over rho_a \nexp left( - left( k_3  r over z  right)^2 right)\n\nwhere r is the radial distance from the jet centerline. Assumes a circular jet with diameter equal to the jet diameter.Ground-reflection is included by method of images.\n\nArguments\n\nrelease_angle::Number=0: the angle at which the jet is released, in radians\nk2::Number=6 parameter of the model, default value is recommended by Long\nk3::Number=5 parameter of the model, default value is recommended by Long\n\n\n\n","category":"method"},{"location":"#Britter-McQuaid-Model","page":"GasDispersion.jl","title":"Britter-McQuaid Model","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The Britter-McQuaid model is an empirical correlation for dense plume dispersion. The model generates an interpolation function for the centerline concentration at the downwind distance z.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"plume(::Scenario, ::BritterMcQuaidPlume)","category":"page"},{"location":"#GasDispersion.plume-Tuple{Scenario, BritterMcQuaidPlume}","page":"GasDispersion.jl","title":"GasDispersion.plume","text":"plume(scenario::Scenario, BritterMcQuaidPlume())\n\nGenerates a Britter-McQuaid dispersion model on the given scenario and returns a callable struct giving the centerline concentration of the form c(x, [y, z, t])\n\nCurrently only implements the max concentration at a downwind distance x, the other coordinates are ignored.\n\n\n\n\n\n","category":"method"},{"location":"#Puff-Models","page":"GasDispersion.jl","title":"Puff Models","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"Puff models are for \"instantaneous\" releases or other time-dependent releases, this often includes, for example, releases of vapour clouds.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff","category":"page"},{"location":"#GasDispersion.puff","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(scenario::Scenario, model::PuffModel)\n\nRuns the puff dispersion model on the given scenario and returns a callable giving the concentration of the form     c(x, y, z, t)\n\nIf model is unspecified, defaults to gaussian.\n\nAll model parameters are assumed to be in SI base units (i.e. distances in m, velocities in m/s, mass in kg, etc.)\n\n\n\n\n\n","category":"function"},{"location":"#Gaussian-Puffs","page":"GasDispersion.jl","title":"Gaussian Puffs","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"A gaussian puff model is defined by gaussian distributions in the x, y, and z directions and travels downwind at the ambient windspeed. The dispersion parameters of the gaussians are correlated with the downwind distance.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff(::Scenario, ::GaussianPuff)","category":"page"},{"location":"#GasDispersion.puff-Tuple{Scenario, GaussianPuff}","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(scenario::Scenario, GaussianPuff())\n\nGenerates a gaussian dispersion model on the given scenario and returns a callable giving the concentration of the form c(x, y, z, t)\n\nGaussian puff model is per Guidelines for Consequence Analysis of Chemical Release, CCPS, New York (1999)\n\ncleft(xyztright) =  dotm Delta t over n \n  exp left( -frac12 left( x - u t  over sigma_x right)^2 right)  over  sqrt2pi sigma_x  \n  exp left( -frac12 left( y over sigma_y right)^2 right)  over  sqrt2pi sigma_y  \ntimes   exp left( -frac12 left( z - h over sigma_z right)^2 right)\n+ exp left( -frac12 left( z + h over sigma_z right)^2 right)  over  sqrt2pi sigma_z  \n\n\n\n","category":"method"},{"location":"#Integrated-Gaussian-Puffs","page":"GasDispersion.jl","title":"Integrated Gaussian Puffs","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"The integrated gaussian puff model treats the release as a sum of n equally spaced gaussian puffs, starting at t = 0 to t = Delta t. The default behaviour is to take the limit n to infty, hence integrated.","category":"page"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"puff(::Scenario, ::IntPuff)","category":"page"},{"location":"#GasDispersion.puff-Tuple{Scenario, IntPuff}","page":"GasDispersion.jl","title":"GasDispersion.puff","text":"puff(scenario::Scenario, IntPuff(kwargs...))\n\nGenerates an integrated gaussian dispersion model, where the release is modeled as a sequence of gaussian puffs, for the given scenario and returns a callable giving the concentration of the form c(x, y, z, t)\n\ncleft(xyztright) = sum_i^n-1  dotm Delta t over n \n  exp left( -frac12 left( x - u left( t - i delta t right)  over sigma_x right)^2 right)  over  sqrt2pi sigma_x  \n  exp left( -frac12 left( y over sigma_y right)^2 right)  over  sqrt2pi sigma_y  \ntimes   exp left( -frac12 left( z - h over sigma_z right)^2 right)\n+ exp left( -frac12 left( z + h over sigma_z right)^2 right)  over  sqrt2pi sigma_z  \n\nwhere δt is Δt/n, and the σs are dispersion parameters correlated with the distance x\n\nArguments\n\nnpuffs::Integer: the number of discrete gaussian puffs, defaults to infinity\n\n\n\n","category":"method"},{"location":"#Future","page":"GasDispersion.jl","title":"Future","text":"","category":"section"},{"location":"","page":"GasDispersion.jl","title":"GasDispersion.jl","text":"In the future I would like to implement more dense gas dispersion models, as well as a more diverse set of release scenarios.","category":"page"}]
}
